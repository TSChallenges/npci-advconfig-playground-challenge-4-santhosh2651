@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ kubectl apply -f cassandra.yaml

statefulset.apps/cassandra created
service/cassandra created
@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ kubectl get pods -l app=cassandra

NAME          READY   STATUS    RESTARTS   AGE
cassandra-0   1/1     Running   0          69s
cassandra-1   1/1     Running   0          53s
@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ kubectl exec -it cassandra-0 -- nodetool status

Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address    Load        Tokens  Owns (effective)  Host ID                               Rack
UN  10.42.0.5  119.82 KiB  16      100.0%            0dcd0d12-3f0c-412e-851e-bbfc1a2b1816  rack1
UN  10.42.0.6  144.3 KiB   16      100.0%            78517542-9c8b-405d-bd39-c84e415026af  rack1

@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ kubectl exec -it cassandra-0 -- nodetool info

ID                     : 0dcd0d12-3f0c-412e-851e-bbfc1a2b1816
Gossip active          : true
Native Transport active: true
Load                   : 119.82 KiB
Uncompressed load      : 157.03 KiB
Generation No          : 1740216499
Uptime (seconds)       : 478
Heap Memory (MB)       : 195.14 / 4000.00
Off Heap Memory (MB)   : 0.00
Data Center            : datacenter1
Rack                   : rack1
Exceptions             : 0
Key Cache              : entries 9, size 728 bytes, capacity 100 MiB, 78 hits, 86 requests, 0.907 recent hit rate, 14400 save period in seconds
Row Cache              : entries 0, size 0 bytes, capacity 0 bytes, 0 hits, 0 requests, NaN recent hit rate, 0 save period in seconds
Counter Cache          : entries 0, size 0 bytes, capacity 50 MiB, 0 hits, 0 requests, NaN recent hit rate, 7200 save period in seconds
Network Cache          : size 8 MiB, overflow size: 0 bytes, capacity 128 MiB
Percent Repaired       : 100.0%
Token                  : (invoke with -T/--tokens to see all 16 tokens)
Bootstrap state        : COMPLETED
Bootstrap failed       : false
Decommissioning        : false
Decommission failed    : false
@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ kubectl exec -it cassandra-0 -- cqlsh

Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> CREATE KEYSPACE user_data
   ... WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 2};
cqlsh> USE user_data;
cqlsh:user_data>
cqlsh:user_data> CREATE TABLE users (
             ...     id UUID PRIMARY KEY,
             ...     name TEXT,
             ...     email TEXT
             ... );
cqlsh:user_data> INSERT INTO users (id, name, email) VALUES (uuid(), 'Alice', 'alice@example.com');
 (id, name, email) VALUES (uuid(), 'Terence', 'tercqlsh:user_data> INSERT INTO users (id, name, email) VALUES (uuid(), 'Terence', 'terence@example.com');
cqlsh:user_data> INSERT INTO users (id, name, email) VALUES (uuid(), 'Mike', 'mike@example.com');
cqlsh:user_data> SELECT * FROM users;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 72751587-9323-4713-b071-322135f822cc | terence@example.com | Terence
 8efab69b-51bf-4a03-9f67-9c97c9aa0bc3 |   alice@example.com |   Alice
 6e1e958f-4aab-493d-8edc-83316463bcc3 |    mike@example.com |    Mike

(3 rows)
cqlsh:user_data> kubectl exec -it cassandra-1 -- cqlsh -e "SELECT * FROM user_data.users;"
             ...
             ... ;
SyntaxException: line 1:0 no viable alternative at input 'kubectl' ([kubectl]...)
cqlsh:user_data> exit
@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $  kubectl exec -it cassandra-1 -- cqlsh -e "SELECT * FROM user_data.users;"


 id                                   | email               | name
--------------------------------------+---------------------+---------
 72751587-9323-4713-b071-322135f822cc | terence@example.com | Terence
 8efab69b-51bf-4a03-9f67-9c97c9aa0bc3 |   alice@example.com |   Alice
 6e1e958f-4aab-493d-8edc-83316463bcc3 |    mike@example.com |    Mike

(3 rows)
@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ DESCRIBE TABLE user_data.users;

zsh: command not found: DESCRIBE
@santhosh2651 ➜ /workspaces/npci-advconfig-playground-challenge-4-santhosh2651 (main) $ kubectl exec -it cassandra-1 -- cqlsh  


Connected to TestCluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> DESCRIBE TABLE user_data.users;

CREATE TABLE user_data.users (
    id uuid PRIMARY KEY,
    email text,
    name text
) WITH additional_write_policy = '99p'
    AND allow_auto_snapshot = true
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND cdc = false
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '16', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND memtable = 'default'
    AND crc_check_chance = 1.0
    AND default_time_to_live = 0
    AND extensions = {}
    AND gc_grace_seconds = 864000
    AND incremental_backups = true
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair = 'BLOCKING'
    AND speculative_retry = '99p';
cqlsh> ALTER TABLE user_data.users WITH caching = { 'keys': 'ALL', 'rows_per_partition': '10' };
cqlsh> CREATE INDEX ON user_data.users(email);
cqlsh> BEGIN BATCH
   ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
   ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
   ... APPLY BATCH;
InvalidRequest: Error from server: code=2200 [Invalid query] message="No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename"
cqlsh> cqlsh> USE user_data;
SyntaxException: line 1:0 no viable alternative at input 'cqlsh' ([cqlsh]...)
cqlsh>
cqlsh> cqlsh:user_data> BEGIN BATCH
   ...    ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
SyntaxException: line 1:0 no viable alternative at input 'cqlsh' ([cqlsh]...)
cqlsh>    ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
SyntaxException: line 1:0 no viable alternative at input '..' ([..]...)
cqlsh>    ... APPLY BATCH;
SyntaxException: line 1:0 no viable alternative at input '..' ([..]...)
cqlsh> BEGIN BATCH
   ...    INSERT INTO user_data.users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
   ...    INSERT INTO user_data.users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
   ... APPLY BATCH;
cqlsh>
cqlsh> SELECT * FROM user_data.users;

 id                                   | email               | name
--------------------------------------+---------------------+---------
 72751587-9323-4713-b071-322135f822cc | terence@example.com | Terence
 8efab69b-51bf-4a03-9f67-9c97c9aa0bc3 |   alice@example.com |   Alice
 7a27b15c-717d-49d9-a7aa-a79913937629 |  shahid@example.com |  Shahid
 6e1e958f-4aab-493d-8edc-83316463bcc3 |    mike@example.com |    Mike
 195483d4-6938-409a-bbb2-335aa9e944c0 |   priya@example.com |   Priya

(5 rows)
cqlsh> history
DESCRIBE TABLE user_data.users;
ALTER TABLE user_data.users WITH caching = { 'keys': 'ALL', 'rows_per_partition': '10' };
CREATE INDEX ON user_data.users(email);
BEGIN BATCH
INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
INSERT INTO users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
APPLY BATCH;
BEGIN BATCH INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com'); INSERT INTO users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com'); APPLY BATCH;
cqlsh> USE user_data;
cqlsh:user_data> BEGIN BATCH
   ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
cqlsh:user_data> BEGIN BATCH    ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
   ... INSERT INTO users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
   ... APPLY BATCH;
BEGIN BATCH
   INSERT INTO user_data.users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');
   INSERT INTO user_data.users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com');
APPLY BATCH;
BEGIN BATCH    INSERT INTO user_data.users (id, name, email) VALUES (uuid(), 'Priya', 'priya@example.com');    INSERT INTO user_data.users (id, name, email) VALUES (uuid(), 'Shahid', 'shahid@example.com'); APPLY BATCH;
SELECT * FROM user_data.users;
cqlsh> 
